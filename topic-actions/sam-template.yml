AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS lambda for auto-formation purpose.

Parameters:
  ApplicationName:
    Type: String
    Description: Application Name
  KakfaStackName:
    Type: String
    Description: Kakfa Cluster Stack Name
  KafkaBootstrapServers:
    Type: String
    Description: Kafka Bootstrap Servers
  NetworkingStackName:
    Type: String
    Description: Networking Stack Name

Resources:
  DynamoDbTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: topic-info
      PrimaryKey:
        Name: topicName
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      SSESpecification:
        SSEEnabled: true

  Api:
    Type: AWS::Serverless::Api
    MethodSettings:
      DataTraceEnabled: true
      MetricsEnabled: true
      HttpMethod: '*'
      LoggingLevel: INFO
    AccessLogSetting:
      DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}'
      Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
    Properties:
      Name: KafkaPlatformCrudApi
      StageName: Live
      TracingEnabled: true
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      Auth:
        Authorizers:
          LambdaDeleteAuthorizer:
            FunctionArn:
              Fn::GetAtt:
                - DeleteAuthorizerHandler
                - Arn
            FunctionPayloadType: REQUEST
            Identity:
              ReauthorizeEvery: 0
              Headers:
                - Authorization
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-${Api}
      RetentionInDays: 1

  CreateTopicHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'target/topic-actions-0.0.1-SNAPSHOT.jar'
      Handler: 'com.example.topics.create.CreateTopicHandler'
      Runtime: java11
      Description: Java function
      FunctionName: !Sub '${ApplicationName}-create-topic'
      MemorySize: 512
      Timeout: 30
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource: '*'
      Tracing: Active
      AutoPublishAlias: live
      Environment:
        Variables:
          BOOTSTRAP_SERVERS: !Ref KafkaBootstrapServers
          DYNAMODB_SERVICE_URL_OVERRIDE: ""
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /topics
            Method: POST
            RestApiId: !Ref Api
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${KakfaStackName}::BastionHostSecurityGroupId'
        SubnetIds:
          Fn::Split:
            - ','
            - Fn::ImportValue: !Sub '${NetworkingStackName}::SubnetsPrivate'
  GetTopicDetailsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'target/topic-actions-0.0.1-SNAPSHOT.jar'
      Handler: 'com.example.topics.details.GetTopicDetailsHandler'
      Runtime: java11
      Description: Java function
      FunctionName: !Sub '${ApplicationName}-topic-details'
      MemorySize: 512
      Timeout: 30
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource: '*'
      Tracing: Active
      AutoPublishAlias: live
      Environment:
        Variables:
          BOOTSTRAP_SERVERS: !Ref KafkaBootstrapServers
          DYNAMODB_SERVICE_URL_OVERRIDE: ""
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /topics/{topic}
            Method: GET
            RestApiId: !Ref Api
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${KakfaStackName}::BastionHostSecurityGroupId'
        SubnetIds:
          Fn::Split:
            - ','
            - Fn::ImportValue: !Sub '${NetworkingStackName}::SubnetsPrivate'

  DeleteTopicHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'target/topic-actions-0.0.1-SNAPSHOT.jar'
      Handler: 'com.example.topics.delete.DeleteTopicHandler'
      Runtime: java11
      Description: Java function
      FunctionName: !Sub '${ApplicationName}-delete-topic'
      MemorySize: 512
      Timeout: 30
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource: '*'
      Tracing: Active
      AutoPublishAlias: live
      Environment:
        Variables:
          BOOTSTRAP_SERVERS: !Ref KafkaBootstrapServers
          DYNAMODB_SERVICE_URL_OVERRIDE: ""
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /topics/{topic}
            Method: DELETE
            RestApiId: !Ref Api
            Auth:
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${KakfaStackName}::BastionHostSecurityGroupId'
        SubnetIds:
          Fn::Split:
            - ','
            - Fn::ImportValue: !Sub '${NetworkingStackName}::SubnetsPrivate'

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Ref ApplicationName
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 4
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false

  CognitoUserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [ 'code', 'implicit' ]
      CallbackURLs: [ 'http://localhost:3000', 'http://localhost:8080' ,'https://localhost', 'https://example.com/authentication' ]
      SupportedIdentityProviders: [ 'COGNITO' ]
      AllowedOAuthScopes: [ 'phone', 'email', 'openid' ]
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join [ '-', [ !Ref ApplicationName, !Ref AWS::StackName ] ]
      UserPoolId: !Ref CognitoUserPool

  DeleteAuthorizerHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'target/topic-actions-0.0.1-SNAPSHOT.jar'
      Handler: 'com.example.topics.delete.lambdaauthorizer.infra.DeleteAuthorizerHandler'
      Runtime: java11
      Description: Java function
      FunctionName: !Sub '${ApplicationName}-delete-authorizer'
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          BOOTSTRAP_SERVERS: !Ref KafkaBootstrapServers
          DYNAMODB_SERVICE_URL_OVERRIDE: ""
          API_LIVE_STAGE_ARN: "*"
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource: '*'
      Tracing: Active
      AutoPublishAlias: live
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${KakfaStackName}::BastionHostSecurityGroupId'
        SubnetIds:
          Fn::Split:
            - ','
            - Fn::ImportValue: !Sub '${NetworkingStackName}::SubnetsPrivate'
